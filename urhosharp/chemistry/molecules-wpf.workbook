---
uti: com.xamarin.workbook
platforms:
- WPF
---

## Molecules

UrhoSharp is a powerful 3D game engine for Xamarin and .NET developers. It is similar in spirit to Appleâ€™s SceneKit and SpriteKit and includes physics, navigation, networking, and much more...while still being cross-platform.

```csharp
#r "Urho.dll"
```

```csharp
using Urho; using Urho.Actions; using Urho.Shapes; using System;
```

```csharp
var app = await SimpleApplication.RunAsync (
	new ApplicationOptions ("Data") {
		Width = 700, 
		Height = 700 });
var rootNode = app.Scene.CreateChild();
```

We have created a WPF window containing a `SimpleApplication`.
Let's add Ambient Light and apply Fast approximate anti-aliasing

```csharp
var zone = app.Scene.CreateComponent<Zone>();
zone.AmbientColor = new Color(0.3f, 0.3f, 0.3f);
app.Viewport.RenderPath.Append(CoreAssets.PostProcess.FXAA3);
```

Define methods creating Atoms and Connections between them:

```csharp
static Node AddAtom(Node rootNode, Vector3 position, float size, Color color)
{
	var atomNode = rootNode.CreateChild();
	atomNode.Position = position;
	atomNode.SetScale(size);
	var sphere = atomNode.CreateComponent<Sphere>();
	sphere.Color = color;
	return atomNode;
}

static void AddConnection(Node rootNode, Vector3 v1, Vector3 v2 = default(Vector3))
{
	var node = rootNode.CreateChild();
	var distance = Distance(v2, v1);
	node.Scale = new Vector3(0.3f, Math.Abs(distance), 0.3f);
	node.Position = (v1 + v2) / 2f;
	node.Rotation = Quaternion.FromRotationTo(Vector3.UnitY, v1 - v2);
	var cylinder = node.CreateComponent<Cylinder>();
	cylinder.SetMaterial(Material.FromColor(Color.Black));
}

static float Distance(Vector3 v1, Vector3 v2)
{
	return (float)Math.Sqrt(
		(v2.X - v1.X) * (v2.X - v1.X) + 
		(v2.Y - v1.Y) * (v2.Y - v1.Y) + 
		(v2.Z - v1.Z) * (v2.Z - v1.Z));
}
```

Define a molecule of Propane - C3H8

```csharp
var hColor = new Color(0.3f, 0.6f, 0.4f);
var cColor = new Color(0.2f, 0.4f, 0.6f);

var node = app.RootNode.CreateChild();

// C1
var c1 = AddAtom(node, new Vector3(-1.5f, 0, 0), 1f, cColor);
var c1h1 = AddAtom(c1, new Vector3(-0.5f, 0.7f, 0), 0.6f, hColor);
var c1h2 = AddAtom(c1, new Vector3(-0.5f, -0.7f, 0), 0.6f, hColor);
var c1h3 = AddAtom(c1, new Vector3(-0.7f, 0f, -0.5f), 0.6f, hColor);
AddConnection(c1, c1h1.Position);
AddConnection(c1, c1h2.Position);
AddConnection(c1, c1h3.Position);

// C2
var c2 = AddAtom(node, new Vector3(0, -0.5f, 0), 1f, cColor);
var c2h1 = AddAtom(c2, new Vector3(-0.5f, -0.5f, -0.5f), 0.5f, hColor);
var c2h2 = AddAtom(c2, new Vector3(0.5f, -0.5f, -0.5f), 0.5f, hColor);
AddConnection(c2, c2h1.Position);
AddConnection(c2, c2h2.Position);

// C3
var c3 = AddAtom(node, new Vector3(1.5f, 0, 0), 1f, cColor);
var c3h1 = AddAtom(c3, new Vector3(0.5f, 0.7f, 0), 0.6f, hColor);
var c3h2 = AddAtom(c3, new Vector3(0.5f, -0.7f, 0), 0.6f, hColor);
var c3h3 = AddAtom(c3, new Vector3(0.7f, 0f, -0.5f), 0.6f, hColor);
AddConnection(c3, c3h1.Position);
AddConnection(c3, c3h2.Position);
AddConnection(c3, c3h3.Position);

// Connections between C1, C2 and C3
AddConnection(node, c1.Position, c2.Position);
AddConnection(node, c2.Position, c3.Position);

node.RunActions(new RepeatForever(new RotateBy(3f, 0, 360, 0)));

app.MoveCamera = true;
```

```csharp
async void AtomWithElectrons(Node container)
{
	var core = container.CreateComponent<Sphere>();
	core.Color = Color.Blue;

	var rotations = new[]
		{
			new Quaternion(0, 45, 45),
			new Quaternion(0, -45, 45),
			new Quaternion(0, 45, -45),
			new Quaternion(0, -45, -45),
			new Quaternion(0, 30, 0),
			new Quaternion(0, -30, 0),
		};

	for (int i = 0; i < 6; i++)
	{
		var electroRootNode = container.CreateChild();
		electroRootNode.Rotation = rotations[i];// new Quaternion(0, 45, 45);
		var electronNode = electroRootNode.CreateChild();
		electronNode.SetScale(0.2f);
		electronNode.Position = new Vector3(0, 2, 0);

		var electron = electronNode.CreateComponent<Sphere>();
		electron.Color = Color.Black;

		electronNode.RunActions(new RepeatForever(new RotateAroundBy(1, Vector3.Zero, 360, 0, 0, TransformSpace.Parent)));
		var boxTrail = electronNode.CreateComponent<RibbonTrail>();
		boxTrail.Material = (app.ResourceCache.GetMaterial("RibbonTrailMaterial.xml"));
		boxTrail.StartColor = (new Color(0.0f, 0.5f, 1.0f, 1.0f));
		boxTrail.EndColor = (new Color(0.5f, 0.5f, 0.5f, 0.0f));
		boxTrail.Width = (0.1f);
		boxTrail.UpdateInvisible = (true);
		await electronNode.RunActionsAsync(new DelayTime(0.2f));
	}
}
```

```csharp
var atomNode = app.RootNode.CreateChild();
atomNode.Position = new Vector3(0, 5, 10);
AtomWithElectrons(atomNode);
```

