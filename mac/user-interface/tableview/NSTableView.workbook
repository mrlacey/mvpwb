---
uti: com.xamarin.workbook
platforms:
- MacMobile
---

**NSTableView** is a native cocoa control for displaying data in a table. Start by creating an instance and set it's frame to a reasonable size. It will be autosized via an owning **NSClipView**.

```csharp
var frame = MainWindow.ContentView.Frame;
NSTableView tableView = new NSTableView () {
	Frame = frame
};
```

Every **NSTableView** expected to have at least one **NSTableColumn.**

```csharp
tableView.AddColumn (new NSTableColumn ("Values"));
tableView.AddColumn (new NSTableColumn ("Data"));
```

**NSTableView** expects to be hosted inside an **NSClipView**.

```csharp
NSClipView clipView = new NSClipView (frame) {
		AutoresizingMask = NSViewResizingMask.HeightSizable | NSViewResizingMask.WidthSizable
};
clipView.DocumentView = tableView;
```

Add it to the window’s content view.

```csharp
MainWindow.ContentView = clipView;
```

**NSTableView** uses a two classes, a **DataSource** and **Delegate** to determine what data to display. **NSTableView** can be used in two different “modes”, **cell** **based** and **view based**.

Different overrides apply to each, and if you override some of the cell based methods your view ones will not be called.

Delegates recieve events associated with user action and determine how an item should be visualized.

This sample will just use the name of the row number.

```csharp
static string [] NumberWords = new[] { "Zero", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine" };
```

By using **MakeView** with an identifier, existing views can be recycled, which can improve performance.

```csharp
class TableDelegate : NSTableViewDelegate 
{
	const string identifer = "myCellIdentifier";
	public override NSView GetViewForItem (NSTableView tableView, NSTableColumn tableColumn, nint row)
	{
		NSTextField view = (NSTextField)tableView.MakeView (identifer, this);
		if (view == null) {
			view = new NSTextField ();
			view.Identifier = identifer;
			view.Bordered = false;
			view.Selectable = false;
			view.Editable = false;
		}
		view.StringValue = tableColumn.Identifier == "Values" ? (NSString)row.ToString () : (NSString)NumberWords [row];
		return view;			
	}
}
```

**TableDataSource** defines the structures of the table, which for tables is just the row count. You could also just have one class implement **INSTableViewDataSource** and **INSTableViewDelegate**.

```csharp
class TableDataSource : NSTableViewDataSource
{
	public override nint GetRowCount (NSTableView tableView)
	{
		return 10;
	}
}
```

Hooking up the **Delegate** and **DataSource** to the **NSTableView** is the final step. This is populate the table with the sample data.

```csharp
tableView.DataSource = new TableDataSource ();
tableView.Delegate = new TableDelegate ();
```