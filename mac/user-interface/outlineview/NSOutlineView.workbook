---
uti: com.xamarin.workbook
platforms:
- MacMobile
---

**NSOutlineView** is a native cocoa control for displaying tree data. Start by creating an instance and set it's frame to a reasonable size. It will be autosized via an owning **NSClipView**.

```csharp
var frame = MainWindow.ContentView.Frame;
NSOutlineView outlineView = new NSOutlineView () {
	Frame = frame
};
```

Every **NSOutlineView** must have at least one column or your delegate will not be called.

```csharp
NSTableColumn column = new NSTableColumn ("Values");
outlineView.AddColumn (column);
```

You must set **OutlineTableColumn** or the arrows showing children/expansion will not be drawn.

```csharp
outlineView.OutlineTableColumn = column;
```

**NSOutlineView** expects to be hosted inside an **NSClipView**.

```csharp
NSClipView clipView = new NSClipView (frame) {
		AutoresizingMask = NSViewResizingMask.HeightSizable | NSViewResizingMask.WidthSizable
};
clipView.DocumentView = outlineView;
```

Add it to the window’s content view.

```csharp
MainWindow.ContentView = clipView;
```

That isn’t very exciting without any data. Node will be a simple tree data structure.

We have to derive from **NSObject**, as **NSOutlineViewDataSource** expects to return one.

```csharp
class Node : NSObject
{
	public string Name { get; private set; }
	List<Node> Children;

	public Node (string name)
	{
		Name = name;
		Children = new List<Node> ();
	}

	public Node AddChild (string name)
	{
		Node n = new Node (name);
		Children.Add (n);
		return n;
	}

	public Node GetChild (int index)
	{
		return Children [index];
	}

	public int ChildCount => Children.Count;
	public bool IsLeaf => ChildCount == 0;
}
```

A method to create example data.

```csharp
Node CreateExampleTree ()
{
	Node parentNode = new Node ("");
	for (int i = 0 ; i < 5 ; ++i) {
		Node n = parentNode.AddChild ("Parent: " + i);
		for (int j = 0; j < 3 ; ++j)
			n.AddChild ("Child: " + j);
	}
	return parentNode;
}
```

**NSOutlineView** uses a two classes, a **DataSource** and **Delegate** to determine what data to display. **NSOutlineView** can be used in two different “modes”, **cell** **based** and **view based**.

Different overrides apply to each, and if you override some of the cell based methods your view ones will not be called.

**OutlineViewDelegate** defines the view for an individual element of the tree. The item passed in is generated by **OutlineViewDataSource.**

By using **MakeView** with an identifier, existing views can be recycled, which can improve performance.

```csharp
class OutlineViewDelegate : NSOutlineViewDelegate
{
	const string identifer = "myCellIdentifier";
	public override NSView GetView (NSOutlineView outlineView, NSTableColumn tableColumn, NSObject item)
	{
		NSTextField view = (NSTextField)outlineView.MakeView (identifer, this);
		if (view == null) {
			view = new NSTextField () {
				Identifier = identifer,
				Bordered = false,
				Selectable = false,
				Editable = false
			};
		}
		view.StringValue = ((Node)item).Name;
		return view;
	}
}
```

**OutlineViewDataSource** defines the structures of the tree, how many elements and if they are expandable. **GetChild** determines the NSObject that is passed to **OutlineViewDelegate.GetView**.

If the item passed in is null, then Cocoa is refering to the root the the tree.

```csharp
class OutlineViewDataSource : NSOutlineViewDataSource
{
	Node parentNode;
	public OutlineViewDataSource (Node node)
	{
		parentNode = node;
	}

	public override nint GetChildrenCount (NSOutlineView outlineView, NSObject item)
	{
		item = item == null ? parentNode : item;
		return ((Node)item).ChildCount;
	}

	public override NSObject GetChild (NSOutlineView outlineView, nint childIndex, NSObject item)
	{
		item = item == null ? parentNode : item;
		return ((Node)item).GetChild ((int)childIndex);
	}

	public override bool ItemExpandable (NSOutlineView outlineView, NSObject item)
	{
		item = item == null ? parentNode : item;
		return !((Node)item).IsLeaf;
	}
}
```

Hooking up the **Delegate** and **DataSource** to the **NSOutlineView** is the final step. This is populate the tree with the sample data.

```csharp
outlineView.Delegate = new OutlineViewDelegate ();
outlineView.DataSource = new OutlineViewDataSource (CreateExampleTree ());
```
