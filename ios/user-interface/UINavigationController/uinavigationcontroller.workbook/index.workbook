---
uti: com.xamarin.workbook
platform: iOS
packages: []
---

# Hierarchical Navigation with the UINavigationController

One of the more common needs of an application is to manage the user experience of moving up and down through a hierarchy of screens. In iOS, this is accomplished with the `UINavigationController`. The `UINavigationController` is a prime example of the Model-View-Controller separation of concerns: it is primarily responsible for coordinating a stack of *other* `UIViewControllers`.

First, load the `UIViewControllers`that will be controlled by the `UINavigationController`:

```csharp
//The implementation of these controllers is not important to understanding UINavigationController
#load "Hierarchical-Navigation.csx"

```

Next, create a UINavigationController:

```csharp
var navController = new UINavigationController();
```

Xamarin Workbooks initializes its agent with a basic `UIViewController`, but this can be modified programmatically:

```csharp
KeyWindow.RootViewController = navController;
```

The `UINavigationController` only controls a small amount of screen space ‚Äî the translucent navigation bar that appears below the status bar. The rest of the screen is controlled by the topmost `UIViewCOntroller` in the navigation controller‚Äôs stack. To push a controller onto the stack, use:

```csharp
navController.PushViewController(cyanController, false);
```

---

###### ‚ö† Warning

* A `UIViewController` may only be contained in a single `UINavigationController`. Attempting to add it twice will result in an exception.

* The interactive nature of a Xamarin Workbook makes the above mistake easy to make! If you crash the `navController`, it's probably best to reload the Workbook before continuing.

---

Because the `cyanController` is the `navController`‚Äôs first child (and therefore it‚Äôs `RootViewController`), the navigation bar does not display a ‚Äúback‚Äù navigation control, but if we add another `UIViewController`, the navigation bar creates a standard navigation experience, with a back button labeled ‚ÄúBack‚Äù:

```csharp
navController.PushViewController(redController, true);
```

The second parameter to \`PushViewController\` is a bool that controls whether the change is animated.

You can modify the title of the back button by setting the following code in the view controller *above* where you want the modified title to appear:

```csharp
redController.NavigationItem.BackBarButtonItem = new UIBarButtonItem("Pop to Red", UIBarButtonItemStyle.Plain, null);
navController.PushViewController(greenController, true);
```

The navigation bar can additionally display a `Title`:

```csharp
navController.NavigationBar.TopItem.Title = "Green Controller"
```

And it can have a background image:

```csharp
var img = UIImage.FromFile("wood-texture-pattern.jpg");
navController.NavigationBar.SetBackgroundImage(img, UIBarMetrics.Default);
```

Without the background image, you can see that the navigation bar sits on top of the presented `UIViewController` :

```csharp
navController.NavigationBar.SetBackgroundImage(null, UIBarMetrics.Default);
```

If you just add a `UIControl` to the `greenViewController`‚Äôs view, it will sit beneath the navigation bar:

```csharp
var label = new UILabel(new CGRect(0, 100, 100, 50)) { Text = "MyControl" };
greenController.View.AddSubview(label);
label.Frame
```

The easiest way to layout the control to respect the navigation bar is to use autolayout and the `TopLayoutGuide` property of the `UIViewController`, which ‚Äúknows about‚Äù the status and navigation bars:

```csharp
label.TranslatesAutoresizingMaskIntoConstraints = false;
var margins = greenController.View.LayoutMarginsGuide;
label.LeadingAnchor.ConstraintEqualTo(margins.LeadingAnchor).Active = true;
label.TrailingAnchor.ConstraintEqualTo(margins.TrailingAnchor).Active = true;
label.TopAnchor.ConstraintEqualTo(greenController.TopLayoutGuide.GetBottomAnchor(), 10).Active = true;
```

You‚Äôve already explored the `PushViewController` method on the `UINavigationController`. It‚Äôs complement is the `PopViewController` method. As with `PushViewController`, a boolean specifies whether the change should be animated:

```csharp
navController.PopViewController(true)
```

\(Note that the ‚ÄúBack Button‚Äù in the navigation bar automatically pops the current controller, you do not need to write an event handler to do so.) 

If you have a deep hierarchy of controllers:

```csharp
navController.PushViewController(greenController, true);
navController.PushViewController(blueController,true);
```

You may pop the entire stack with:

```csharp
navController.PopToRootViewController(true);
```

###### üëç Try it now!

* Push and pop the `redController`, `greenController`, and `blueController` view controllers

* Set a new `Title` and `BackgroundImage` for the navigation bar. 

---