---
uti: com.xamarin.workbook
platform: iOS
packages: []
---

# Understanding your iOS Application

‚ùóÔ∏èTo use this workbook follow through each section in sequence to learn how to build up a view heirarchy. Make sure to do the *Try it now* sections to reinforce your learning! ‚ùóÔ∏è

When you open an iOS application on your device, what you see is a number of components working together to give you the perception of one single View. In this guide we will interactively explore the make up of an iOS application, allowing you to get a deeper understanding of its functionality.

### The Window

The most fundamental object of an iOS app and first thing your user will see is a window. You can think of this window as a shop front. There is one Window, or screen, that allows your user to view the app. You can add whatever you want to the window, but in most cases only one Main Window is used.

To create a new Window, first declare a new instance of `UIWindow` and then make that window visible:

```csharp
var window = new UIWindow(UIScreen.MainScreen.Bounds);
window.MakeKeyAndVisible()
```

If you inspect the simulator now, you‚Äôll notice a blank white screen. This is because there isn‚Äôt actually anything visible on the screen ‚Äì you‚Äôll have to add it.

An iOS application uses a View Controller to manage all the views within it ‚Äì it loads and disposes the views, it handles user interactions with the views, and it co-ordinates with other objects. There can be many View Controllers, of many types (eg. `TableViewController`), within one application, all of which work together.

Start building your *View Heirarchy* by creating a single UIViewController:

```csharp
var controller = new UIViewController()
```

As mentioned earlier that most applications have a single Window. Every Window has a single **Root View Controller**, and this is the first View Controller that your user will see and interact with.

Set the recently created View Controller, to be window‚Äôs RootViewController:

```csharp
window.RootViewController = controller
```

The RootViewController has been set, but if you look at the simulator it won‚Äôt look any different. Change the background color using the code below:

```csharp
controller.View.BackgroundColor = UIColor.Magenta
```

You can‚Äôt set the color of the actual View Controller itself, it‚Äôs just an UI-less object that manages views.

###### üëç Try it now!

* See if you can change the color of the background to something different

* Can you change it to an RGB value? *(Hint: Create a new instance of UIColor, assign Red, Blue, Green, and alpha nfloat values, and set the background to the new instance)*

You should be starting to see how the View Heirarchy of iOS apps work. Having something to look at on the screen is nice, but usually users want to interact with their apps by navigating through them. To do this you can use a Navigation Controller. As suggested by the name, it manages the navigation of your application. A navigation controller is a UI-less controller that will manage a stack of however many View Controllers that you add to it.

Add one to your app:

```csharp
var navigationController = new UINavigationController();
```

You should notice that nothing happens. This is because the RootViewController still thinks that controller is the first thing it should be showing us. Amend this to set the `navigationController`as the `RootViewController`:

```csharp
window.RootViewController = navigationController
```

Next, use the existing View Controller (named *controller*) as the first View Controller in the navigationController‚Äôs stack.

###### üëç Try it now

* Pass the View Controller (controller) into the newly created instance of our navigation controller. You can pass this as an argument in the code above and press cmd \+ Enter to run the code. If you inspect the simulator, it should look like this:

* ‚ö†Ô∏èThis step is important. If you don‚Äôt do this step, the rest of the code may not work correctly

The View Controller‚Äôs properties can be changed to allow the app to be more user friendly. You can set the Navigation Item‚Äôs title to be anything you want. Update the string below to give the title a name that you think is suitable:

```csharp
controller.NavigationItem.Title = "iOS is Cool"
```

### Building the View Heirarchy

Now, we have a ViewContoller which is the first ViewController in our Navigation Stack and we‚Äôve set this as our RootViewController (this first thing that the user will see). Now, let‚Äôs allow our user to interact with our application by adding UI *controls* to our View.

In any app that you create, user interaction is essential. To allow for this, user interface controls can be added to any View.

Create a text box with the following code snippet. A `UITextField` can be used to gather text based input from the user:

```csharp
var name =  new UITextField{ Placeholder = "Enter Name",
                             BorderStyle = UITextBorderStyle.RoundedRect,
                    Frame = new CGRect(10, 80, controller.View.Bounds.Width -20, 31.0f)}
```

Notice that when creating a control in code, such as a `UITextField`, a `Frame`property is declared.  This property defines the the location and size of the control. In iOS the 0,0 coordinate is in the upper left with \+ x to the right and \+ y down.

This control then needs to be added to the ViewController‚Äôs view as a **subview**, so that it will display in your app:

```csharp
controller.View.AddSubview(name)
```

Let‚Äôs add another few Text Fields and a button:

```csharp
var email =  new UITextField{ Placeholder = "Enter Email",
                              BorderStyle = UITextBorderStyle.RoundedRect,
                Frame = new CGRect(10, 120, controller.View.Bounds.Width -20, 31.0f)};

var password = new UITextField{ Placeholder = "Enter Password",
                                BorderStyle = UITextBorderStyle.RoundedRect,            
                                SecureTextEntry = true,
                Frame = new CGRect(10, 160, controller.View.Bounds.Width - 20, 31.0f)};

var enterButton = UIButton.FromType(UIButtonType.System);
enterButton.Frame = new CGRect(10, 200, controller.View.Bounds.Width - 20, 31.0f);
enterButton.SetTitle ("Submit", UIControlState.Normal);
```

#### üëç Try it now:

* Set the `KeyboardType`property of the email TextField to `EmailAddress`

* Adjust the appearance of the Button. For example, you could try to change the background color of the button, or you could adjust the corner radius of its layer to make the corners rounded.

Once they have been created, we have to add these controls to the view. We can add multiple subviews to the view hierarchy by using `AddSubviews` and passing in an array of UIViews that includes all our views:

```csharp
controller.View.AddSubviews(new UIView[]{email, password, enterButton})
```

At this point, the app has a simple (though passive) user interface that is displayed in a single ViewController. The next step is to add code to handle user input. This is covered in the UIButton workbook.