---
uti: com.xamarin.workbook
platform: iOS
packages: []
---

# Adding Touch ID to your Xamarin.iOS app

iOS 8 introduced the functionality for developers to use Apple’s biometric fingerprint authentication technology to add an additional layer of security to their apps.

All authentication data held on an iOS device, is stored within the Secure Enclave, a co-processor  within the chip that is responsible for determining successful matches for authentication. When Touch ID is enabled on a users device, the Secure Enclave will check if there is a suitable match, and if there is will decrypt the requested keychain item.

In this example, we {>> apparently we are discouraging the use of ‘we’ in our Workbooks <<} are going to explore how to add Touch ID to a Xamarin iOS app.

First, add the required using statements to import the APIs that we will be using.

```csharp
using UIKit;
using CoreGraphics;
using LocalAuthentication;
```

Next, we need to create the Window, and add a RootViewController to it to allow our user to interact with the interface. We have set the background of the View Controller’s view to yellow. {>> Workbooks now exposes \`RootViewController\` as a global, so this step is not strictly necessary <<}

```csharp
var window = new UIWindow(UIScreen.MainScreen.Bounds);
window.MakeKeyAndVisible();
var vc = new UIViewController();
window.RootViewController = vc;
vc.View.BackgroundColor = UIColor.Yellow
```

Let’s create a button. When the user clicks this button, they will be asked to provide their finger print to authenticate themselves:

```csharp
var button = UIButton.FromType (UIButtonType.System);
button.Frame = new CGRect(20, 200, 280, 40);
button.SetTitle("Locally Authenticate Me!", UIControlState.Normal)
```

We’ll then add this button to the view hierarchy:

```csharp
vc.View.AddSubview(button)
```

When the user authenticates successfully, we want to **do** something. For the sake of this example, we will simply just send them to a new View Controller, with a label that tells them they have been successfully authenticated. Let’s create this View Controller now:

```csharp
var vcAuthenticated = new UIViewController();
var label = new UILabel(new CGRect(40, 200, 280, 40));
label.Text = "You are now Authenticated";
vcAuthenticated.View.AddSubview(label);
vcAuthenticated.View.BackgroundColor = UIColor.Magenta
```

Now we can start using Local Authentication to present the Touch ID user interface to our users. First we will create a new context, this is what will be used to evaluate the authentication policy. We’ll also create a new `NSError` and provide a reason, in the form of a String, to explain to the user why we want them to authenticate:

```csharp
var context = new LAContext();
NSError AuthError;
var myReason = new NSString("To gain secret access");
```

Finally, add the code to handle TouchID inside the button’s event handler. First we’ll use `CanEvaluatePolicy`  with the policy `DeviceOwnerAuthenticationWithBiometrics`to determine if the device has TouchID enabled. If it does then we can display the Touch ID UI by using `EvaluatePolicy`. There are three pieces of information we have to pass into `EvaluatePolicy` – the policy itself, a string explaining why authentication is necessary, and a reply handler. The reply handler tells the application what it should do in the case of a successful, or unsuccessful, authentication. {>> Could you add a message if touch id is _not_ enabled? i.e., if the simulator doesn’t have the enrolled thing set. That threw me the first time I ran this workbook. <<}

One of the caveats of Local Authentication is that it must be run on the foreground, so make sure to use `InvokeOnMainThread`:

```csharp
button.TouchUpInside += (sender, e) => {
                if (context.CanEvaluatePolicy(LAPolicy.DeviceOwnerAuthenticationWithBiometrics, out AuthError)){
					var replyHandler = new LAContextReplyHandler((success, error) => {
						vc.InvokeOnMainThread(()=>{
							if(success){
								vc.PresentViewController(vcAuthenticated, true, null);
							}
							else{
								//Show fallback mechanism here
								button.SetTitle("You shall not pass", UIControlState.Disabled);
							}
						});
					 });
					context.EvaluatePolicy(LAPolicy.DeviceOwnerAuthenticationWithBiometrics, myReason, replyHandler);
				}
            };
```

## Note

To determine Touch ID in the simulator, you must select **Touch ID Enrolled** in the simulator’s \*\*Hardware \*\*menu. You can then simulate finger touches by browsing to **Hardware > Simulate Finger Touch** and selecting either \*\*Matching \*\*or **Non-matching. {>> This threw me the first time through. Maybe move to top? (I dunno’, just a thought) <<}**